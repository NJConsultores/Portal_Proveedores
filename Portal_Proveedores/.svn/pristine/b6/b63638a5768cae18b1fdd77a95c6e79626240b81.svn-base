package com.infra.factura.business.validation;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.annotation.PostConstruct;
import javax.xml.bind.ValidationEvent;

import org.apache.commons.io.IOUtils;
import org.apache.commons.net.ftp.FTPClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXParseException;

import com.infra.cliente.addenda.dto.FeAddendaDto;
import com.infra.cliente.service.ws.WSStatusRecepcion;
import com.infra.core.util.CoreConstantes;
import com.infra.core.util.ErrorValidacionUtil;
import com.infra.core.util.SatUtil;
import com.infra.core.util.SessionUtil;
import com.infra.factura.bigdata.sat.cfd.CFDv2;
import com.infra.factura.bigdata.sat.cfd.CFDv2_2;
import com.infra.factura.bigdata.sat.cfdi.CFDv3;
import com.infra.factura.bigdata.sat.cfdi.CFDv3_2;
import com.infra.factura.bigdata.sat.cfdi.CFDv3_3;
import com.infra.factura.bigdata.sat.cfdi.TFDv1;
import com.infra.factura.bigdata.sat.cfdi.TFDv1_1;
import com.infra.factura.bigdata.sat.security.KeyLoader;
import com.infra.factura.business.FeFacturaBusiness;
import com.infra.factura.business.base.FeBaseBusiness;
import com.infra.factura.business.cfdi.timbre.schema.TimbreFiscalDigital;
import com.infra.factura.business.common.GenericCFD;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDOrigen;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDTipo;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDVersion;
import com.infra.factura.dto.FeCertificadoPacDto;
import com.infra.factura.dto.FeConsultaCfdiSatDto;
import com.infra.factura.dto.FeErrorValidacionDto;
import com.infra.factura.dto.FeFacturaDto;
import com.infra.factura.dto.FeResultadoValidaCFDDto;
import com.infra.factura.dto.FeTmsDto;
import com.infra.factura.exception.UnexpectedRuntimeException;
import com.infra.factura.exposition.EnviarFacturaMB;
import com.infra.factura.util.FeConstantes;
import com.infra.factura.util.FeConstantes.TipoProveedor;
import com.infra.factura.ws.ConsultaCFDISAT;

//@Component
//@Scope("prototype")
public class FeValidadorCFDBaseBusiness extends FeBaseBusiness {

	protected static Logger logger = LoggerFactory.getLogger(FeValidadorCFDBaseBusiness.class);

	protected static final String ERROR_INVALID_ENCODING_NAME = "Error on line 1: Invalid encoding name";

	protected FeTmsDto tmsDao;
//	@Autowired
//	protected FacturaMapper facturaMapper;
//	@Autowired
//	protected ErrorValidacionService errorValidacionService;
//	@Autowired
//	protected CertificadoPacMapper certificadoPacDao;
//	@Autowired
//	protected PropiedadesUtil propiedadesUtil;
	@Autowired
	protected ConsultaCFDISAT consultaCFDISAT;
	@Autowired
	private FeFacturaBusiness facturaBusiness;
	@Autowired
	private WSStatusRecepcion statusRecepcion;
	@Autowired
	private EnviarFacturaMB enviarFacturaMB;

	protected FeResultadoValidaCFDDto feResultadoValidaCFDDto = new FeResultadoValidaCFDDto();
	protected List<FeErrorValidacionDto> errors = new ArrayList<FeErrorValidacionDto>();
	protected List<FeErrorValidacionDto> addendaErrors = new ArrayList<FeErrorValidacionDto>();
	protected com.infra.factura.business.cfd.schema.Comprobante comprobanteV2 = null;
	protected com.infra.factura.business.cfdi.schema.Comprobante comprobanteV3 = null;
	protected com.infra.factura.business.cfd.ii.schema.Comprobante comprobanteV2_2 = null;
	protected com.infra.factura.business.cfdi.ii.schema.Comprobante comprobanteV3_2 = null;
	protected com.infra.factura.business.cfdi.iii.schema.Comprobante comprobanteV3_3 = null;
	protected int errorCount = 0;
	protected int addendaErrorCount = 0;
	protected long idFactura = 0;
	protected int idProveedor = 0;
	// protected int idUsuario = 0;
	protected String idUsuario = "";
	protected String rfcProveedor = "";
	protected String noProveedorSAP = "";
	protected X509Certificate certificate;
	protected CFDVersion version;
	protected CFDOrigen origen;
	protected boolean guardaFactura = true;
	protected boolean contieneAddenda = true;
	protected FeAddendaDto feAddendaDto;
	protected boolean runningTestMode = false;
	protected boolean proveedorTMS = false;
	protected TipoProveedor tipoProveedor = TipoProveedor.None;
	protected Locale locale;

	@PostConstruct
	public void init() {
		System.out.println("Init de Prototype FeValidadorCFDBaseBusiness");
	}

//	public CertificadoPacMapper getCertificadoPacDao() {
//		return certificadoPacDao;
//	}
//
//	public void setCertificadoPacDao(CertificadoPacMapper certificadoPacDao) {
//		this.certificadoPacDao = certificadoPacDao;
//	}
//
//	public FacturaMapper getFacturaDao() {
//		return facturaMapper;
//	}
//
//	public void setFacturaDao(FacturaMapper facturaDao) {
//		this.facturaMapper = facturaDao;
//	}

	public int getErrorCount() {
		return errorCount;
	}

	public void setErrorCount(int errorCount) {
		this.errorCount = errorCount;
	}

	public List<FeErrorValidacionDto> getErrors() {
		return errors;
	}

	public void setErrors(List<FeErrorValidacionDto> errors) {
		this.errors = errors;
	}

//	public PropiedadesUtil getPropiedadesUtil() {
//		return propiedadesUtil;
//	}
//
//	public void setPropiedadesUtil(PropiedadesUtil propiedadesUtil) {
//		this.propiedadesUtil = propiedadesUtil;
//	}

	public void verificarTimbrado(GenericCFD cfd, Object comprobante) {
		long startTime = System.currentTimeMillis();
		X509Certificate cert = obtenerCertificadoPAC(comprobante);
		TFDv1 tfd = null;
		int code = 0;
		if (null != cert && !runningTestMode) {
			try {
				switch (version) {
				case CFDv3:
					tfd = new TFDv1((CFDv3) cfd, cert);
					if (null != tfd) {
						code = tfd.verificar();
					}
					break;
				case CFDv3_2:
					tfd = new TFDv1((CFDv3_2) cfd, cert);
					if (null != tfd) {
						code = tfd.verificar();
					}
					break;
				case CFDv3_3:
					TFDv1_1 tfd1 = new TFDv1_1((CFDv3_3) cfd, cert);
					if (null != tfd1) {
						code = tfd1.verificar();
					}
					break;
				default:
					break;
				}

			} catch (Exception e) {
				System.out.println("Error al validar timbre");
				e.printStackTrace();
				handleException(e);
			}
			if (code != 600) {
				registraError("validacion-009");
			}
		}
		logger.info("validarComprobante : " + ((System.currentTimeMillis() - startTime) / 1000.0) + "s");
	}

	private X509Certificate obtenerCertificadoPAC(Object comprobante) {
		String noCertificadoSAT = null;
		X509Certificate cert = null;
		try {
			switch (version) {
			/*
			 * case CFDv3: timbreFiscalDigital = TFDv1
			 * .getTimbreFiscalDigital(((com.infra.factura.business.
			 * cfdi.schema.Comprobante) comprobante)); break;
			 */
			case CFDv3_2:
				TimbreFiscalDigital timbreFiscalDigital = null;
				timbreFiscalDigital = TFDv1.getTimbreFiscalDigital(
						((com.infra.factura.business.cfdi.ii.schema.Comprobante) comprobante));
				if (timbreFiscalDigital != null) {
					noCertificadoSAT = timbreFiscalDigital.getNoCertificadoSAT();
				}
				break;
			case CFDv3_3:
				com.infra.factura.business.cfdi.timbre.i.schema.TimbreFiscalDigital timbreFiscalDigital1 = null;
				timbreFiscalDigital1 = TFDv1_1.getTimbreFiscalDigital(
						((com.infra.factura.business.cfdi.iii.schema.Comprobante) comprobante));
				if (timbreFiscalDigital1 != null) {
					noCertificadoSAT = timbreFiscalDigital1.getNoCertificadoSAT();
				}
				break;
			default:
				break;
			}
			if (noCertificadoSAT != null && !noCertificadoSAT.equals("")) {
				FeCertificadoPacDto certTemp = new FeCertificadoPacDto();
				certTemp.setNumeroCertificado(noCertificadoSAT);

//				FeCertificadoPacDto certificadoPacDto = certificadoPacDao.obtenerCertificado(certTemp);
				byte[] certificado = null;

//				if (certificadoPacDto != null) {
//					certificado = certificadoPacDto.getCertificado();
//				}

				if (null == certificado) {
					// logger.info("Se intenta descargar Certificado : " +
					// noCertificadoSAT);
					InputStream certificadoIO = SatUtil.descargarCertificado(noCertificadoSAT);
					System.out.println("certificadoIO: " + certificadoIO);
					certificado = IOUtils.toByteArray(certificadoIO);

//					FeRespuestaDto respuesta = procesarCertificadoPac(noCertificadoSAT + ".cer", certificado);
//
//					if (!respuesta.isError()) {
//						if (ConstantesGenerales.CONFIRMAR.equals(respuesta.getRespuesta())) {
//							logger.info("Se descargo Certificado y se guardo en la BD");
//						} else {
//							logger.info("Se descargo Certificado: " + respuesta.getDescripcion());
//						}
//					} else {
//						logger.info("Se descargo Certificado y no se guardo en BD: " + respuesta.getDescripcion());
//					}
				}

				if (null == certificado) {
					registraError("validacion-010", noCertificadoSAT);
				} else {
					cert = KeyLoader.loadX509Certificate(new ByteArrayInputStream(certificado));
					if (null == cert) {
						registraError("validacion-010", noCertificadoSAT);
					}
				}
			} else {
				registraError("validacion-011");
			}
		} catch (Exception e) {
			e.printStackTrace();
			final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
			unexpectedRuntimeException.logException();
			registraError("validacion-012", unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
					+ (e.getMessage() != null ? e.getMessage() : ""));
		}
		return cert;
	}

//	public FeRespuestaDto procesarCertificadoPac(String nombreArchivo, byte[] certificado) throws Exception {
//		FeRespuestaDto respDto = new FeRespuestaDto();
//		respDto.setRespuesta("cargaCertPac");
//		int iStr = nombreArchivo.lastIndexOf(".");
//		String numeroCertificado = nombreArchivo.substring(0, iStr);
//		FeCertificadoPacDto certDto = new FeCertificadoPacDto();
//		certDto.setNumeroCertificado(numeroCertificado);
//		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(certificado);
//		try {
////			FeCertificadoPacDto certPac = certificadoPacDao.obtenerCertificado(certDto);
//			FeCertificadoPacDto certPac = null;
//			if (certPac == null || certPac.getIdCertificadoPac() <= 0) {
//				procesarCertificadoPac(nombreArchivo, byteArrayInputStream, 0);
//				respDto.setError(false);
//				respDto.setDescripcion(LocaleUtil.getResourceBundle().getString("msg.certificado.pac.mensaje"));
////			} else {
////				respDto.setRespuesta("confirmar");
//			}
//		} catch (Exception e) {
//			respDto.setError(true);
//			respDto.setDescripcion(e.getMessage());
//			e.printStackTrace();
//		} finally {
//			certDto = null;
//		}
//		return respDto;
//	}

//	public void procesarCertificadoPac(String fileName, InputStream certificado, int idCertificadoPac)
//			throws Exception {
//		FeCertificadoPacDto certDto = obtenerCertificadoPac(fileName, certificado);
//		if (certificado != null) {
//			certificado.reset();
//		}
//		certDto.setCertificado(IOUtils.toByteArray(certificado));
//		certDto.setIdCertificadoPac(idCertificadoPac);
//		if (idCertificadoPac <= 0) {
//			certificadoPacDao.registrar(certDto);
//		} else {
//			certificadoPacDao.actualizar(certDto);
//		}
//	}

	public FeCertificadoPacDto obtenerCertificadoPac(String fileName, InputStream certificado) throws Exception {
		FeCertificadoPacDto certDto = new FeCertificadoPacDto();
		CertificateFactory cf = null;
		Certificate cert = null;
		X509Certificate x509cert = null;
		int iStr = fileName.lastIndexOf(".");
		String numeroCertificado = fileName.substring(0, iStr);
		if (!(certificado instanceof FileInputStream)) {
			certificado.reset();
		}
		certDto.setNumeroCertificado(numeroCertificado);
		try {
			cf = CertificateFactory.getInstance("X.509");
			cert = cf.generateCertificate(certificado);
			if (cert instanceof X509Certificate) {
				x509cert = (X509Certificate) cert;
				certDto.setFechaValidezIni(x509cert.getNotBefore());
				certDto.setFechaValidezFin(x509cert.getNotAfter());
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			x509cert = null;
			cert = null;
			cf = null;
		}
		return certDto;
	}

	protected boolean esComprobanteAceptado(CFDVersion version) {
		long startTime = System.currentTimeMillis();
		boolean esAceptado = false; // RLA estaba como false
		TimbreFiscalDigital timbreFiscalDigital = null;
		com.infra.factura.business.cfdi.timbre.i.schema.TimbreFiscalDigital timbreFiscalDigital1 = null;
		FeFacturaDto facturaDto = new FeFacturaDto();
		CFDTipo tipo = CFDTipo.None;
		// String rfcEmisor = null;

		switch (version) {
		case CFDv3_2:
			// rfcEmisor = comprobanteV3_2.getEmisor().getRfc();
			tipo = CFDTipo.valueOf(comprobanteV3_2.getTipoDeComprobante().toUpperCase());
			try {
				timbreFiscalDigital = TFDv1.getTimbreFiscalDigital(comprobanteV3_2);
				if (timbreFiscalDigital != null) {
					facturaDto.setUuid(timbreFiscalDigital.getUUID());
				}
			} catch (Exception e) {
				logger.error("No se pudo obtener el TFD del comprobante", e);
			}
			break;
		case CFDv3_3:
			tipo = CFDTipo.valueOf(comprobanteV3_3.getTipoDeComprobante().toUpperCase());
			try {
				timbreFiscalDigital1 = TFDv1_1.getTimbreFiscalDigital(comprobanteV3_3);
				if (timbreFiscalDigital1 != null) {
					facturaDto.setUuid(timbreFiscalDigital1.getUUID());
				}
			} catch (Exception e) {
				logger.error("No se pudo obtener el TFD del comprobante", e);
			}
			break;
		default:
			break;
		}

		if (tipo == CFDTipo.TRASLADO) {
			registraError("validacion-083");
			guardaFactura = false;
			esAceptado = true;
		}

		if (errorCount == 0) {
			// List<?> listaFacturas = null;
			// try {
			// if (facturaDto.getUuid() == null ||
			// facturaDto.getUuid().isEmpty())
			// throw new Exception("La factura no cuenta con Folio Fiscal.");
			//
			// listaFacturas =
			// facturaMapper.consultarFacturaPorUuid(facturaDto.getUuid());
			// } catch (Exception e) {
			// final UnexpectedRuntimeException unexpectedRuntimeException = new
			// UnexpectedRuntimeException(e);
			// unexpectedRuntimeException.logException();
			// registraError("validacion-016", version.name(),
			// unexpectedRuntimeException.getExceptionInfo().getExceptionID() +
			// ". "
			// + (e.getMessage() != null ? e.getMessage() : ""));
			// }
			//
			// if (listaFacturas != null && listaFacturas.size() >= 1) {
			// facturaDto = (FeFacturaDto) listaFacturas.get(0);
			// if (facturaDto.getEstatus().equals(CFDEstatus.EnRevision)
			// || facturaDto.getEstatus().equals(CFDEstatus.Pendiente)
			// || facturaDto.getEstatus().equals(CFDEstatus.Aceptado)
			// || facturaDto.getEstatus().equals(CFDEstatus.PorAutorizar)) {
			// registraError("validacion-017", facturaDto.getUuid());
			// guardaFactura = false;
			// esAceptado = true;
			// } else if (facturaDto.getEstatus().equals(CFDEstatus.Cancelado))
			// {
			// registraError("validacion-084", facturaDto.getUuid());
			// guardaFactura = false;
			// esAceptado = true;
			// }
			//
			// idFactura = facturaDto.getIdFactura();
			// }
			// logger.info("esComprobanteAceptado : " +
			// ((System.currentTimeMillis() - startTime) / 1000.0) + "s");
		}

		return esAceptado;
	}

//	protected void validaCertificadoComprobante() {
//		FeFacturaDto facturaDto = new FeFacturaDto();
//		String rfc = null;
//		String noCertificado = null;
//		Date fechaEmision = null;
//		switch (version) {
//		/*
//		 * case CFDv2: rfc = comprobanteV2.getEmisor().getRfc(); noCertificado =
//		 * comprobanteV2.getNoCertificado(); fechaEmision =
//		 * comprobanteV2.getFecha(); break; case CFDv3: rfc =
//		 * comprobanteV3.getEmisor().getRfc(); noCertificado =
//		 * comprobanteV3.getNoCertificado(); fechaEmision =
//		 * comprobanteV3.getFecha(); break; case CFDv2_2: rfc =
//		 * comprobanteV2_2.getEmisor().getRfc(); noCertificado =
//		 * comprobanteV2_2.getNoCertificado(); fechaEmision =
//		 * comprobanteV2_2.getFecha(); break;
//		 */
//		case CFDv3_2:
//			rfc = comprobanteV3_2.getEmisor().getRfc();
//			noCertificado = comprobanteV3_2.getNoCertificado();
//			fechaEmision = comprobanteV3_2.getFecha();
//			break;
//		default:
//			break;
//		}
//
//		try {
//			facturaDto.setNumeroCertificado(noCertificado);
//			facturaDto.setRfcEmisor(rfc);
//			facturaDto.setFechaEmision(fechaEmision);
//			final List<FeCertificadoFacturaDto> certificados = facturaMapper.consultarCertificados(facturaDto);
//
//			if (null == certificados || certificados.size() == 0) {
//				// registraError("validacion-019",noCertificado);
//
//				if (!getFielFTP(facturaDto)) {
//					System.out.println("No se encontro en certificados en FTP");
//					registraError("validacion-019", facturaDto.getNumeroCertificado());
//
//				} else {
//					System.out.println("Busca certificados FIEL");
//					final List<FeCertificadoFacturaDto> certificadosFiel = facturaMapper
//							.consultarCertificadosFiel(facturaDto);
//					if (certificadosFiel == null || certificadosFiel.size() == 0) {
//						registraError("validacion-019", noCertificado);
//					} else {
//
//						for (FeCertificadoFacturaDto certificadoFacturaDto : certificadosFiel) {
//							if (rfc.equals(certificadoFacturaDto.getRfc())) {
//
//								DateFormat gmtFormat = new SimpleDateFormat();
//								TimeZone gmtTime = TimeZone.getTimeZone("GMT");
//								gmtFormat.setTimeZone(gmtTime);
//								Calendar newCalendarFinal = Calendar.getInstance();
//								newCalendarFinal.setTime(certificadoFacturaDto.getFechaFinal());
//
//								Calendar newCalendarInicial = Calendar.getInstance();
//								newCalendarInicial.setTime(certificadoFacturaDto.getFechaInicial());
//
//								Calendar newCalendarHoy = Calendar.getInstance();
//								newCalendarHoy.setTime(new Date());
//
//								if (!FechaUtil.esEntre(newCalendarHoy, newCalendarInicial, newCalendarFinal)) {
//									registraError("validacion-020", noCertificado);
//									break;
//								}
//								break;
//							}
//						}
//					}
//				}
//
//			} else {
//				boolean isCertificadoRfc = false;
//				for (FeCertificadoFacturaDto certificadoFacturaDto : certificados) {
//					if (rfc.equals(certificadoFacturaDto.getRfc())) {
//						isCertificadoRfc = true;
//
//						DateFormat gmtFormat = new SimpleDateFormat();
//						TimeZone gmtTime = TimeZone.getTimeZone("GMT");
//						gmtFormat.setTimeZone(gmtTime);
//						Date fechaEmisionGMT = new SimpleDateFormat().parse(gmtFormat.format(fechaEmision));
//
//						if (!(fechaEmisionGMT.after(certificadoFacturaDto.getFechaInicial())
//								&& fechaEmisionGMT.before(certificadoFacturaDto.getFechaFinal()))) {
//							registraError("validacion-020", noCertificado);
//							break;
//						}
//						break;
//					}
//				}
//
//				if (!isCertificadoRfc) {
//					registraError("validacion-021", rfc, noCertificado);
//				}
//			}
//		} catch (Exception e) {
//			final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
//			unexpectedRuntimeException.logException();
//			registraError("validacion-022", unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
//					+ (e.getMessage() != null ? e.getMessage() : ""));
//		}
//
//	}

	protected boolean getFielFTP(FeFacturaDto facturaDto) {
		logger.info("Revisando FIEL");
		boolean fiel = true;
		String valorParamFiel = "";
		int delimita1 = 0;
		int delimita2 = 0;
		int delimita = 0;
		String noCert = "";
		FTPClient client = new FTPClient();
		InputStream in_certs = null;
		Date fechaEmision = null;
		try {
//			if (facturaMapper.existeCertificadoFiel(facturaDto.getNumeroCertificado()) == false) {
				logger.info("No existe FIEL en el sistema, se descargara del FTP");
				noCert = facturaDto.getNumeroCertificado();
				fechaEmision = facturaDto.getFechaEmision();
				valorParamFiel = FeConstantes.SAT_CERTIFICADO_FIEL;
				delimita1 = new Integer(FeConstantes.SAT_DELIMITA_FIEL1).intValue();
				delimita2 = new Integer(FeConstantes.SAT_DELIMITA_FIEL2).intValue();

				String path_part1 = noCert.substring(0, delimita1);
				delimita = delimita1 + delimita1;
				String path_part2 = noCert.substring(delimita1, delimita);
				delimita1 = delimita + delimita2;
				String path_part3 = noCert.substring(delimita, delimita1);
				delimita = delimita2 + delimita1;
				String path_part4 = noCert.substring(delimita1, delimita);
				delimita1 = delimita + delimita2;
				String path_part5 = noCert.substring(delimita, delimita1);
				String path = path_part1 + "/" + path_part2 + "/" + path_part3 + "/" + path_part4 + "/" + path_part5
						+ "/" + noCert + FeConstantes.SAT_EXTCERT_FIEL;

				logger.debug("Conectando al FTP");
				client.connect(FeConstantes.SAT_HOST);
				client.login(FeConstantes.SAT_USER,
						FeConstantes.SAT_PASSWORD);
				client.setFileType(FTPClient.BINARY_FILE_TYPE);
				client.enterLocalPassiveMode();

				logger.info("Esperando recibir del FTP");
				in_certs = client.retrieveFileStream(valorParamFiel + path);

				if (null == in_certs) {
					System.out.println("Viene nulo");
					fiel = false;
					// Si es nulo reintenta nuevamente la operación
					/*
					 * Thread.sleep(4000);
					 * System.out.println("Despues del delay vuelve a intentar"
					 * ); in_certs =
					 * client.retrieveFileStream(valorParamFiel+path);
					 * if(null==in_certs){
					 * System.out.println("LO INTENTA DE NUEVO"); fiel=false;
					 * }else{ System.out.println("Poner el codigo de abajo"); }
					 */

				} else {
					javax.security.cert.X509Certificate cert = javax.security.cert.X509Certificate
							.getInstance(in_certs);
					FeCertificadoPacDto certifDto = new FeCertificadoPacDto();
					certifDto.setFechaCarga(new Date());
					certifDto.setFechaValidezFin(cert.getNotAfter());
					certifDto.setFechaValidezIni(cert.getNotBefore());
					certifDto.setNumeroCertificado(noCert);

//					if (facturaMapper.buscarFielPorRfcYNumSerie(facturaDto.getRfcEmisor(), noCert)) {
//						System.out.println("Actualiza la fecha de carga ");
//						facturaMapper.actualizarFiel(facturaDto.getRfcEmisor(), certifDto);
//					} else {
//						facturaMapper.registrarFiel(facturaDto.getRfcEmisor(), certifDto);
//					}

					if (!(fechaEmision.after(cert.getNotBefore()) && fechaEmision.before(cert.getNotAfter()))) {
						fiel = false;
					}

				}
//			}
		} catch (Exception e) {
			logger.error("Error al consultar la FIEL del Proveedor", e);
			fiel = false;
		} finally {
			if (client.isConnected()) {
				try {
					client.disconnect();
				} catch (IOException ioe) {
					logger.error("Error", ioe);
				}
			}
		}
		return fiel;
	}

	protected void validaFolioComprobante() {
		FeFacturaDto facturaDto = new FeFacturaDto();
		String rfc = null;
		String folio = null;
		String serie = null;
		BigInteger anoAprobacion = null;
		String noAprobacion = null;

		if (version == CFDVersion.CFDv2) {
			rfc = comprobanteV2.getEmisor().getRfc();
			folio = comprobanteV2.getFolio();
			serie = comprobanteV2.getSerie();
			anoAprobacion = comprobanteV2.getAnoAprobacion();
			noAprobacion = comprobanteV2.getNoAprobacion();
		} else {
			rfc = comprobanteV2_2.getEmisor().getRfc();
			folio = comprobanteV2_2.getFolio();
			serie = comprobanteV2_2.getSerie();
			anoAprobacion = comprobanteV2_2.getAnoAprobacion();
			noAprobacion = comprobanteV2_2.getNoAprobacion();
		}
		try {
			facturaDto.setRfcEmisor(rfc);
			facturaDto.setNumeroAprobacion(new BigInteger(noAprobacion).toString());
			facturaDto.setSerie(serie);

//			final List<FeFolioFacturaDto> foliosRFC = facturaMapper.consultarFoliosRFC(facturaDto);
//
//			if (null == foliosRFC || foliosRFC.size() == 0) {
//				registraError("validacion-023", rfc, noAprobacion.toString(), serie);
//			} else {
//				boolean isFolioRfcAnio = false;
//				for (FeFolioFacturaDto folioFacturaDto : foliosRFC) {
//					if (anoAprobacion.toString().equals(folioFacturaDto.getAnioAprobacion())) {
//						isFolioRfcAnio = true;
//						if (folio != null) {
//							if (!(folioFacturaDto.getFolioInicial() <= Integer.parseInt(folio)
//									&& folioFacturaDto.getFolioFinal() >= Integer.parseInt(folio))) {
//								registraError("validacion-024", folio);
//								break;
//							}
//						}
//						break;
//					}
//				}
//				if (!isFolioRfcAnio) {
//					registraError("validacion-025", anoAprobacion.toString(), rfc);
//				}
//			}
		} catch (Exception e) {
			final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
			unexpectedRuntimeException.logException();
			registraError("validacion-026", unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
					+ (e.getMessage() != null ? e.getMessage() : ""));
		}
	}

	public void verificarSelloComprobante(GenericCFD cfd, CFDErrorHandler errorHandler) {
		long startTime = System.currentTimeMillis();
		String certificado = null;
		// logger.info("valida sello en version "+ version);
		switch (version) {
		/*
		 * case CFDv2: certificado = comprobanteV2.getCertificado(); break; case
		 * CFDv3: certificado = comprobanteV3.getCertificado(); break; case
		 * CFDv2_2: certificado = comprobanteV2_2.getCertificado(); break;
		 */
		case CFDv3_2:
			certificado = comprobanteV3_2.getCertificado();
			break;
		case CFDv3_3:
			certificado = comprobanteV3_3.getCertificado();
			break;
		default:
			break;
		}

		if (certificado != null && !certificado.equals("")) {
			// logger.info("certificado no es nulo");
			try {
				feResultadoValidaCFDDto.setTieneCertificado(true);
				if (!runningTestMode) {
					cfd.verificar(errorHandler);
				}
			} catch (RuntimeException e) {
				throw new RuntimeException(e.getMessage());
			} catch (Exception e) {
				e.printStackTrace();
				final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
				unexpectedRuntimeException.logException();
				registraError("validacion-027", version.name(),
						unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
								+ (e.getMessage() != null ? e.getMessage() : ""));
			}
		} else {
			if (null != certificate && !certificate.equals("")
					&& (version == CFDVersion.CFDv2 || version == CFDVersion.CFDv2_2)) {
				try {
					if (version == CFDVersion.CFDv2) {
						if (!runningTestMode) {
							((CFDv2) cfd).verificar(certificate, errorHandler);
						}
					} else {
						if (!runningTestMode) {
							((CFDv2_2) cfd).verificar(certificate, errorHandler);
						}
					}
				} catch (Exception e) {
					final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
					unexpectedRuntimeException.logException();
					registraError("validacion-027", version.name(),
							unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
									+ (e.getMessage() != null ? e.getMessage() : ""));
				}
			} else {
				feResultadoValidaCFDDto.setTieneCertificado(false);
				registraError("validacion-028");
			}
		}
		logger.info("verificarSelloComprobante : " + ((System.currentTimeMillis() - startTime) / 1000.0) + "s");
	}

	// public void registraError(String claveError, String... params) {
	// errorCount++;
	// FeErrorValidacionDto errorValidacion = new FeErrorValidacionDto();
	// String language = locale == null ? CoreConstantes.SUFIJO_ESP :
	// locale.getLanguage();
	//
	// try {
	// logger.debug("claveError::" + claveError);
	//
	// if (language.equalsIgnoreCase(CoreConstantes.SUFIJO_ESP)) {
	// errorValidacion = validacionMapper.obtenerErrorValidacion(claveError);
	// } else if (language.equalsIgnoreCase(CoreConstantes.SUFIJO_ING)) {
	// errorValidacion = validacionMapper.obtenerErrorValidacionEn(claveError);
	// } else {
	// errorValidacion = validacionMapper.obtenerErrorValidacion(claveError);
	// }
	// } catch (Exception e) {
	// logger.error("Error al recuperar el error de validación.", e);
	// }
	// errorValidacion.setParametros(params);
	// errors.add(errorValidacion);
	// }

	public void registraError(String claveError, String... params) {
		errorCount++;
		String language = locale == null ? CoreConstantes.SUFIJO_ESP : locale.getLanguage();
		FeErrorValidacionDto errorValidacion = new FeErrorValidacionDto();
		System.out.println("xml:" + enviarFacturaMB.getXml());
		try {
			logger.debug("claveError::" + claveError);
			// statusRecepcion.guardarStatusRecepcion(getLanguage(),
			// getUsuarioActual(), xml, pdf, resultado, statusResultado)

			if (language.equalsIgnoreCase(CoreConstantes.SUFIJO_ESP)) {
				errorValidacion = ErrorValidacionUtil.obtenerErrorValidacion(claveError);
			} else if (language.equalsIgnoreCase(CoreConstantes.SUFIJO_ING)) {
				errorValidacion = ErrorValidacionUtil.obtenerErrorValidacionEn(claveError);
			} else {
				errorValidacion = ErrorValidacionUtil.obtenerErrorValidacion(claveError);
			}
		} catch (Exception e) {
			logger.error("Error al recuperar el error de validación.", e);
		}
		// errorValidacion.setParametros(params);
		// errors.add(errorValidacion);
		System.out.println("GUARDAR ERROR: " + claveError + " y mensaje: " + errorValidacion);
		try {
			statusRecepcion.guardarStatusRecepcion(enviarFacturaMB.getLanguage(), SessionUtil.getUsuarioActual(),
					enviarFacturaMB.getXml().getInputstream(), null, errorValidacion.getDescripcion(), "E");
//			throw new RuntimeException(errorValidacion);
			throw new RuntimeException(errorValidacion.getDescripcion());
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("Error al guardar el estatus de recepcion.", e);
		}
//		throw new EnvioFacturaException(null, "Error" );
	}

	public void registraErrorAddenda(String claveError, String... params) {
		addendaErrorCount++;
		FeErrorValidacionDto errorValidacion = new FeErrorValidacionDto();
		String language = locale == null ? CoreConstantes.SUFIJO_ESP : locale.getLanguage();

		try {
			if (language.equalsIgnoreCase(CoreConstantes.SUFIJO_ESP)) {
				errorValidacion = ErrorValidacionUtil.obtenerErrorValidacion(claveError);
			} else if (language.equalsIgnoreCase(CoreConstantes.SUFIJO_ING)) {
				errorValidacion = ErrorValidacionUtil.obtenerErrorValidacionEn(claveError);
			} else {
				errorValidacion = ErrorValidacionUtil.obtenerErrorValidacion(claveError);
			}
		} catch (Exception e) {
			logger.error("Error al recuperar el error de validación.", e);
		}
		errorValidacion.setParametros(params);
		addendaErrors.add(errorValidacion);
	}

	protected boolean isCFDv2(String xmlString) {
		return !(xmlString.contains("<cfdi:") || xmlString.contains("</cfdi:"));
	}

	public class CFDErrorHandler implements ErrorHandler {

		public void handleEvent(ValidationEvent event) {
			logger.info("\nEVENT");
			logger.info("SEVERITY:  " + event.getSeverity());
			logger.info("MESSAGE:  " + event.getMessage());
			logger.info("LINKED EXCEPTION:  " + event.getLinkedException());
			logger.info("LOCATOR");
			logger.info("    LINE NUMBER:  " + event.getLocator().getLineNumber());
			logger.info("    COLUMN NUMBER:  " + event.getLocator().getColumnNumber());
			logger.info("    OFFSET:  " + event.getLocator().getOffset());
			logger.info("    OBJECT:  " + event.getLocator().getObject());
			logger.info("    NODE:  " + event.getLocator().getNode());
			logger.info("    URL:  " + event.getLocator().getURL());
		}

		public void warning(SAXParseException e) {
			System.out.println("warning::: " + e);
			registraError("validacion-045", e.getMessage());
		}

		public void error(SAXParseException e) {
			e.printStackTrace();
			System.out.println("error::: " + e);
			registraError("validacion-045", e.getMessage());
		}

		public void fatalError(SAXParseException e) {
			System.out.println("fatalError::: " + e);
			registraError("validacion-045", e.getMessage());
		}

		public void registraErrorValidacion(String claveError, String... params) {
			registraError(claveError, params);
		}
	}

	public void reset() {
		feResultadoValidaCFDDto = null;
		errors = null;
		addendaErrors = null;

		feResultadoValidaCFDDto = new FeResultadoValidaCFDDto();
		errors = new ArrayList<FeErrorValidacionDto>();
		addendaErrors = new ArrayList<FeErrorValidacionDto>();
		errorCount = 0;
		addendaErrorCount = 0;
		idFactura = 0;
		tipoProveedor = TipoProveedor.None;
	}

	public class AddendaErrorHandler implements ErrorHandler {
		public void warning(SAXParseException e) {
			final String message = e.getMessage();
			System.out.println("warningAddenda::: " + e);
			registraErrorAddenda("validacion-045", message);
		}

		public void error(SAXParseException e) {
			final String message = e.getMessage();
			System.out.println("errorAddenda::: " + e);
			registraErrorAddenda("validacion-045", message);
		}

		public void fatalError(SAXParseException e) {
			final String message = e.getMessage();
			System.out.println("fatalAddenda::: " + e);
			registraErrorAddenda("validacion-045", message);
		}
	}

	protected int getAnoFactura(CFDVersion version) {
		int anoFactura = 0;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy");
		switch (version) {
		case CFDv2:
			anoFactura = Integer.parseInt(dateFormat.format(comprobanteV2.getFecha()));
			break;
		case CFDv3:
			anoFactura = Integer.parseInt(dateFormat.format(comprobanteV3.getFecha()));
			break;
		case CFDv2_2:
			anoFactura = Integer.parseInt(dateFormat.format(comprobanteV2_2.getFecha()));
			break;
		case CFDv3_2:
			anoFactura = Integer.parseInt(dateFormat.format(comprobanteV3_2.getFecha()));
			break;
		case CFDv3_3:
			anoFactura = Integer.parseInt(dateFormat.format(comprobanteV3_3.getFecha()));
			break;
		default:
			break;
		}
		return anoFactura;
	}

	protected Date getFecha(CFDVersion version) {
		Date fechaEmision = null;
		switch (version) {
		case CFDv2:
			fechaEmision = comprobanteV2.getFecha();
			break;
		case CFDv3:
			fechaEmision = comprobanteV3.getFecha();
			break;
		case CFDv2_2:
			fechaEmision = comprobanteV2_2.getFecha();
			break;
		case CFDv3_2:
			fechaEmision = comprobanteV3_2.getFecha();
			break;
		case CFDv3_3:
			fechaEmision = comprobanteV3_3.getFecha();
			break;
		default:
			break;
		}
		return fechaEmision;
	}

	protected String getRFC(CFDVersion version) {
		String rfc = null;
		switch (version) {
		case CFDv2:
			rfc = comprobanteV2.getEmisor().getRfc();
			break;
		case CFDv3:
			rfc = comprobanteV3.getEmisor().getRfc();
			break;
		case CFDv2_2:
			rfc = comprobanteV2_2.getEmisor().getRfc();
			break;
		case CFDv3_2:
			rfc = comprobanteV3_2.getEmisor().getRfc();
			break;
		default:
			break;
		}
		return rfc;
	}

	public boolean validaUuidSat(CFDVersion version) {
		boolean existeCfdi = false;
		FeErrorValidacionDto errorValidacion = new FeErrorValidacionDto();
		String rfcEmisor = "";
		String rfcReceptor = "";
		String montoTotalFactura = "";
		String uuid = "";
		switch (version) {
		case CFDv3_2:
			rfcEmisor = comprobanteV3_2.getEmisor().getRfc();
			rfcReceptor = comprobanteV3_2.getReceptor().getRfc();
			montoTotalFactura = comprobanteV3_2.getTotal();
			try {
				TimbreFiscalDigital timbreFiscalDigital = null;
				timbreFiscalDigital = TFDv1.getTimbreFiscalDigital(comprobanteV3_2);
				if (timbreFiscalDigital != null) {
					uuid = timbreFiscalDigital.getUUID();
				}
			} catch (Exception e) {
				logger.error("Ocurrió un error en la consulta del ws del SAT", e);
				errorValidacion.setDescripcion("Ocurrió un error en la consulta del Servicio Web del SAT");
				errors.add(errorValidacion);
			}
			break;
		case CFDv3_3:
			rfcEmisor = comprobanteV3_3.getEmisor().getRfc();
			rfcReceptor = comprobanteV3_3.getReceptor().getRfc();
			montoTotalFactura = comprobanteV3_3.getTotal();
			try {
				com.infra.factura.business.cfdi.timbre.i.schema.TimbreFiscalDigital timbreFiscalDigital = null;
				timbreFiscalDigital = TFDv1_1.getTimbreFiscalDigital(comprobanteV3_3);
				if (timbreFiscalDigital != null) {
					uuid = timbreFiscalDigital.getUUID();
				}
			} catch (Exception e) {
				logger.error("Ocurrió un error en la consulta del ws del SAT", e);
				errorValidacion.setDescripcion("Ocurrió un error en la consulta del Servicio Web del SAT");
				errors.add(errorValidacion);
			}
			break;
		default:
			logger.error(
					"Ocurrió un error en la consulta del ws del SAT [no Version " + version.getVersionNumber() + "]");
			errorValidacion.setDescripcion("Ocurrió un error en la consulta del Servicio Web del SAT");
			errors.add(errorValidacion);
			break;
		}
		try {
			FeConsultaCfdiSatDto consultaCfdiSatDto = consultaCFDISAT.consultaCFDI(rfcEmisor, rfcReceptor,
					montoTotalFactura, uuid);
			if (consultaCfdiSatDto != null) {
				if (consultaCfdiSatDto.getEstado().equalsIgnoreCase("Vigente")) {
					existeCfdi = true;
				} else {
					errorValidacion.setDescripcion("El estado del comprobante es " + consultaCfdiSatDto.getEstado());
					errors.add(errorValidacion);
				}
			}
		} catch (Exception e) {
			logger.error("Ocurrió un error en la consulta del ws del SAT", e);
			errorValidacion.setDescripcion("Ocurrió un error en la consulta del Servicio Web del SAT");
			errors.add(errorValidacion);
		}

		return existeCfdi;
	}

	public FeResultadoValidaCFDDto getFeResultadoValidaCFDDto() {
		return feResultadoValidaCFDDto;
	}

	public FeFacturaBusiness getFacturaBusiness() {
		return facturaBusiness;
	}

	public void setFacturaBusiness(FeFacturaBusiness facturaBusiness) {
		this.facturaBusiness = facturaBusiness;
	}
}
