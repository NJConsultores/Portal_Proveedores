package com.infra.vis.val;

import java.util.regex.Pattern;

import com.infra.vis.dto.UVisorBean;
import com.infra.vis.util.TextUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

@Controller
public class UVisorValidator implements Validator {
	
	private static final Logger LOGVISOR = LoggerFactory.getLogger(UVisorValidator.class);
	
	private static final String PASSWORD_PATTERN = "[a-zA-Z_0-9áéíóúüñÁÉÍÓÚÜÑ]+";
	
	public boolean supports(Class<?> clazz) {
		return UVisorBean.class.equals(clazz);
	}
	
	public void validate(final Object neoUser, final Errors errors) {
	    
	    LOGVISOR.info("validate");
	    
		final UVisorBean uvBean = (UVisorBean) neoUser;
		
		//nombre completo
		this.checkCampObl(uvBean.getNomCompUser(), errors, "Nombre Completo");
		
//		nombre completo
        this.checkCampObl(uvBean.getNameUSer(), errors, "ID Usuario");
        
//      Contraseña 
        this.checkCampObl(uvBean.getContrUser(), errors, "Contraseña");
        
//        Contraseña 
        this.checkCampObl(uvBean.getVerConUser(), errors, "Verificación Contraseña");
        
        //caracteres aceptados
        this.checkCharact(uvBean.getContrUser(), errors, "Contraseña");
        
	}
	
	public void validateVer(final Object neoUser, final Errors errors) {
        LOGVISOR.info("validateVer");
        final UVisorBean uvBean = (UVisorBean) neoUser;
        //contraseña y verificacion igual
        if(!this.isContEqVer(uvBean)){
            errors.reject("error.uadd.dif");
        }
    }
	
	public void validateDisp(final Object neoUser, final Errors errors, boolean dispo) {
        LOGVISOR.info("validateDisp");
        //contraseña y verificacion igual
        if(!dispo){
            errors.reject("error.uadd.pre");
        }
        
    }
	
	private void checkCharact(final String contraCap, final Errors errors, final String descCampo) {
	    if(!Pattern.matches(UVisorValidator.PASSWORD_PATTERN, contraCap)){
	        errors.reject("error.uadd.alfa", 
                    new String[]{descCampo}, "validación nuevo usuario");
	    }
    }
	
	private void checkCampObl(final String valCampo, final Errors errors, final String descCampo) {
        if(TextUtil.isNotUsableText(valCampo)){
            errors.reject("error.uadd.req", 
                    new String[]{descCampo}, "validación nuevo usuario");
        }
	}
	
	private boolean isContEqVer(final UVisorBean uvBean){
	    if(TextUtil.isNotUsableText(uvBean.getContrUser()) || 
	            TextUtil.isNotUsableText(uvBean.getVerConUser())){
	        return Boolean.FALSE;
	    } else if(uvBean.getContrUser().equals(uvBean.getVerConUser())){
	        return Boolean.TRUE;
	    }
	    return Boolean.FALSE;
	}
	
}