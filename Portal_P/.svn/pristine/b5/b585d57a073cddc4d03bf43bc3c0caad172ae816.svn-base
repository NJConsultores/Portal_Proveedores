/*
 *  Copyright 2010 BigData.mx
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.infra.factura.bigdata.sat.cfdi;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.URL;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Map;

import javax.xml.XMLConstants;
import javax.xml.bind.Marshaller;
import javax.xml.bind.util.JAXBSource;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import com.infra.factura.bigdata.sat.common.NamespacePrefixMapperImpl;
import com.infra.factura.bigdata.sat.common.URIResolverImpl;
import com.infra.factura.bigdata.sat.security.KeyLoader;
import com.infra.factura.business.cfdi.schema.Comprobante;
import com.infra.factura.business.common.GenericCFD;
import com.infra.factura.business.schema.util.StringAndInputstreamUtil;
import com.infra.factura.business.validation.FeValidadorCFDBaseBusiness.CFDErrorHandler;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDVersion;

import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.xml.sax.ErrorHandler;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public final class CFDv3 extends GenericCFD {

	public static final ImmutableMap<String, String> PREFIXES = ImmutableMap
			.of("http://www.w3.org/2001/XMLSchema-instance", "xsi",
					CFD_3_NAMESPACE, "cfdi",
					TIMBRE_FISCAL_DIGITAL_NAMESPACE, "tfd");

	private final Map<String, String> localPrefixes = Maps.newHashMap(PREFIXES);

	public CFDv3(String xmlString, String... contexts) throws Exception {
		super(CFDVersion.CFDv3, xmlString, contexts);
	}

	public CFDv3(Comprobante comprobante, String... contexts) throws Exception {
		super(comprobante, contexts);
		version = CFDVersion.CFDv3;
	}

	public void addNamespace(String uri, String prefix) {
		localPrefixes.put(uri, prefix);
	}

	public void setTransformerFactory(TransformerFactory tf) {
		this.tf = tf;
		tf.setURIResolver(new URIResolverImpl());
	}

	public void sellar(PrivateKey key, X509Certificate cert) throws Exception {
		cert.checkValidity();
		String signature = getSignature(key);
		((Comprobante) document).setSello(signature);
		byte[] bytes = cert.getEncoded();
		Base64 b64 = new Base64(-1);
		String certStr = b64.encodeToString(bytes);
		((Comprobante) document).setCertificado(certStr);
		BigInteger bi = cert.getSerialNumber();
		((Comprobante) document).setNoCertificado(new String(bi.toByteArray()));
	}

	public Comprobante sellarComprobante(PrivateKey key, X509Certificate cert)
			throws Exception {
		sellar(key, cert);
		return getComprobante();
	}

	public void validar() throws Exception {
		validar(null);
	}

	public void validar(ErrorHandler handler) throws Exception {
		SchemaFactory sf = SchemaFactory
				.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		Source[] source = {
		          new StreamSource(getClass().getResourceAsStream(XSDv3)),
		          new StreamSource(getClass().getResourceAsStream(XSD_TFDv3)),
//		          new StreamSource(new URL(COMPLEMENTO_ECC_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_DONAT_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_DIVISAS_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_ECB_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_IMPLOCAL_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_LEYENDAS_FISCALES_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_PFIC_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_TURISTAPASAJEROEXTRANJERO_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_DETALLISTA_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_IEDU_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_VENTA_VEHICULOS_XSD11).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_PSGECFD_XSD).openStream())
		          new StreamSource(new URL(COMPLEMENTO_TERCEROS_XSD).openStream())
		          };
		Schema schema = sf.newSchema(source);
		Validator validator = schema.newValidator();
		if (handler != null) {
			validator.setErrorHandler(handler);
		}
		validator.validate(new JAXBSource(context, document));
	}

	public void verificar(ErrorHandler handler) throws Exception {
		String certStr = ((Comprobante) document).getCertificado();
		Base64 b64 = new Base64();
		byte[] cbs = b64.decode(certStr);
		X509Certificate cert = KeyLoader
				.loadX509Certificate(new ByteArrayInputStream(cbs));
		verificar(cert, handler);
	}

	public void verificar(Certificate cert, ErrorHandler handler) throws Exception {
		Base64 b64 = new Base64();
		String sigStr = ((Comprobante) document).getSello();
		byte[] signature = b64.decode(sigStr);
		byte[] bytes = getOriginalBytes(XSLTv3);
		Signature sig = Signature.getInstance("SHA1withRSA", BouncyCastleProvider.PROVIDER_NAME);
		sig.initVerify(cert);
		sig.update(bytes);
		boolean bool = sig.verify(signature);
		if (!bool) {
			((CFDErrorHandler)handler).registraErrorValidacion("validacion-057");
		}
	}

	public void guardar(OutputStream out) throws Exception {
		Marshaller m = context.createMarshaller();
		m.setProperty("com.sun.xml.bind.namespacePrefixMapper",
				new NamespacePrefixMapperImpl(localPrefixes));
		m.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, CFD_3_NAMESPACE + "  "
				+ URL_CFDV3_XSD);
		byte[] xmlHeaderBytes = XML_HEADER.getBytes("UTF8");
		out.write(xmlHeaderBytes);
		m.marshal(document, out);
	}

	public String getCadenaOriginal() throws Exception {
		byte[] bytes = getOriginalBytes(XSLTv3);
		return new String(bytes, "UTF8");
	}

	public static Comprobante newComprobante(String xmlString) throws Exception {
		xmlString = StringAndInputstreamUtil.convertUnicodeEscape(xmlString);
		return (Comprobante) load(CFDVersion.CFDv3, xmlString);
	}

	public static Comprobante newComprobanteForPDF(String xmlString) throws Exception {
		return (Comprobante) load(CFDVersion.CFDv3, xmlString);
	}

	String getSignature(PrivateKey key) throws Exception {
		byte[] bytes = getOriginalBytes(XSLTv3);
		Signature sig = Signature.getInstance("SHA1withRSA", BouncyCastleProvider.PROVIDER_NAME);
		sig.initSign(key);
		sig.update(bytes);
		byte[] signed = sig.sign();
		Base64 b64 = new Base64(-1);
		return b64.encodeToString(signed);
	}

	Comprobante getComprobante() throws Exception {
		return (Comprobante) copy(document, context);
	}

	static void dump(String title, byte[] bytes, PrintStream out) {
		out.printf("%s: ", title);
		for (byte b : bytes) {
			out.printf("%02x ", b & 0xff);
		}
		out.println();
	}

	public void validar(InputStream inputStream, ErrorHandler handler)
			throws Exception {
		SchemaFactory sf = SchemaFactory
				.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		Source[] source = {
		          new StreamSource(getClass().getResourceAsStream(XSDv3)),
		          new StreamSource(getClass().getResourceAsStream(XSD_TFDv3)),
//		          new StreamSource(new URL(COMPLEMENTO_ECC_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_DONAT_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_DIVISAS_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_ECB_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_IMPLOCAL_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_LEYENDAS_FISCALES_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_PFIC_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_TURISTAPASAJEROEXTRANJERO_XSD).openStream()),
		          new StreamSource(new URL(COMPLEMENTO_DETALLISTA_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_IEDU_XSD).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_VENTA_VEHICULOS_XSD11).openStream()),
//		          new StreamSource(new URL(COMPLEMENTO_PSGECFD_XSD).openStream())
		          new StreamSource(new URL(COMPLEMENTO_TERCEROS_XSD).openStream())
		          };
		Schema schema = sf.newSchema(source);
		Validator validator = schema.newValidator();
		if (handler != null) {
			validator.setErrorHandler(handler);
		}
		try {
			validator.validate(new StreamSource(inputStream));
		} finally {
			inputStream.close();
		}
	}

	public void validar(String xmlString, ErrorHandler handler)
			throws Exception {
		InputStream inputStream = StringAndInputstreamUtil
				.convertStringToStream(xmlString);
		validar(inputStream, handler);
	}

}