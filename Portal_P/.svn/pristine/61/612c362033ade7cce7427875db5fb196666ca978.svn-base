package com.infra.factura.bigdata.sat.cfdi;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.security.PrivateKey;
import java.security.Security;
import java.security.Signature;
import java.security.cert.X509Certificate;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.util.JAXBSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Result;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import org.apache.commons.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.ErrorHandler;

import com.infra.factura.bigdata.sat.common.NamespacePrefixMapperImpl;
import com.infra.factura.business.cfdi.iii.schema.Comprobante;
import com.infra.factura.business.cfdi.timbre.i.schema.ObjectFactory;
import com.infra.factura.business.cfdi.timbre.i.schema.TimbreFiscalDigital;
import com.infra.factura.business.common.GenericCFD;
import com.infra.factura.business.schema.util.StringAndInputstreamUtil;

public final class TFDv1_1 {
	private static final String XSLT = "/xslt/cadenaoriginal_TFD_1_1.xslt";

	private static final String XSD = "/xsd/v3/TimbreFiscalDigitalv11.xsd";

	private static final JAXBContext CONTEXT = createContext();

	private static final JAXBContext createContext() {
		try {
			return JAXBContext.newInstance("com.infra.factura.business.cfdi.timbre.i.schema");
		} catch (Exception e) {
			throw new Error(e);
		}
	}
	
	private final com.infra.factura.business.cfdi.iii.schema.Comprobante document_3;
	
	private final TimbreFiscalDigital tfd;
	
	private final X509Certificate cert;

	private TransformerFactory tf;
	
	public TFDv1_1(CFDv3_3 cfd, X509Certificate cert) throws Exception {
		this(cfd, cert, UUID.randomUUID(), new Date());
	}
	
	
	TFDv1_1(CFDv3_3 cfd, X509Certificate cert, UUID uuid, Date date)
			throws Exception {
		this.cert       = cert;
		this.document_3 = cfd.getComprobante();
		this.tfd        = getTimbreFiscalDigital(document_3, uuid, date);
	}
	
	public void setTransformerFactory(TransformerFactory tf) {
		this.tf = tf;
	}

	public int timbrar(PrivateKey key) throws Exception {
		if (tfd.getSelloSAT() != null) {
			return 304;
		}
		
		String signature = getSignature(key);
		tfd.setSelloSAT(signature);
		stamp();
		
		return 300;
	}

	public void validar() throws Exception {
		validar(null);
	}

	public void validar(ErrorHandler handler) throws Exception {
		SchemaFactory sf    = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		Schema schema       = sf.newSchema(getClass().getResource(XSD));
		Validator validator = schema.newValidator();
		
		if (handler != null) {
			validator.setErrorHandler(handler);
		}
		
		validator.validate(new JAXBSource(CONTEXT, tfd));
	}

	public int verificar() throws Exception {
		if (tfd == null) {
			return 601; // No contiene timbrado
		}
		
		String sigStr    = tfd.getSelloSAT();
		byte[] signature = Base64.decodeBase64(sigStr);
		byte[] bytes     = getOriginalBytes();
		Security.addProvider(new BouncyCastleProvider());
//		Signature sig    = Signature.getInstance("SHA1withRSA", BouncyCastleProvider.PROVIDER_NAME);
		Signature sig    = Signature.getInstance("SHA256withRSA", BouncyCastleProvider.PROVIDER_NAME);
		
		sig.initVerify(cert);
		sig.update(bytes);
		
		boolean verified = sig.verify(signature);
		
		return verified ? 600 : 602; // Sello del timbrado no valido
	}

	public String getCadenaOriginal() throws Exception {
		byte[] bytes = getOriginalBytes();
		
		return new String(bytes);
	}

	public void guardar(OutputStream out) throws Exception {
		Marshaller m = CONTEXT.createMarshaller();
		
		m.setProperty("com.sun.xml.bind.namespacePrefixMapper", new NamespacePrefixMapperImpl(CFDv3.PREFIXES));
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		
		if(document_3 != null){
			m.setProperty(
					Marshaller.JAXB_SCHEMA_LOCATION,
					"http://www.sat.gob.mx/cfd/3  "
					+ GenericCFD.URL_CFDV3_XSD);
			m.marshal(document_3, out);
		}
	}

	TimbreFiscalDigital getTimbre() {
		return tfd;
	}

	byte[] getOriginalBytes() throws Exception {
		JAXBSource in              = new JAXBSource(CONTEXT, tfd);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		Result out                 = new StreamResult(baos);
		TransformerFactory factory = tf;
		
		if (factory == null) {
			factory = TransformerFactory.newInstance();
		}
		
		Transformer transformer = factory.newTransformer(new StreamSource(getClass().getResourceAsStream(XSLT)));
		
		transformer.transform(in, out);
		
		String cadenaOri = baos.toString("UTF-8");
		cadenaOri        = cadenaOri.replaceAll("\r\n", "");
		cadenaOri        = cadenaOri.replaceAll("\n", "");
		cadenaOri        = cadenaOri.replaceAll("\t", "");
		cadenaOri        = StringAndInputstreamUtil.convertUnicodeEscape(cadenaOri);
		
		return cadenaOri.getBytes("UTF-8");
	}

	String getSignature(PrivateKey key) throws Exception {
		byte[] bytes  = getOriginalBytes();
//		Signature sig = Signature.getInstance("SHA1withRSA", BouncyCastleProvider.PROVIDER_NAME);
		Signature sig    = Signature.getInstance("SHA256withRSA", BouncyCastleProvider.PROVIDER_NAME);
		
		sig.initSign(key);
		sig.update(bytes);
		
		byte[] signed = sig.sign();
		Base64 b64    = new Base64(-1);
		
		return b64.encodeToString(signed);
	}

	private void stamp() throws Exception {
		Element element                                      = marshalTFD();
		com.infra.factura.business.cfdi.iii.schema.ObjectFactory of = new com.infra.factura.business.cfdi.iii.schema.ObjectFactory();
		Comprobante.Complemento comp                         = of.createComprobanteComplemento();
		List<Object> list                                    = comp.getAny();
		
		list.add(element);
		
		document_3.getComplemento().add(comp);
	}

	private Element marshalTFD() throws Exception {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		dbf.setNamespaceAware(true);
		DocumentBuilder db = dbf.newDocumentBuilder();
		Document doc = db.newDocument();
		Marshaller m = CONTEXT.createMarshaller();
		m.setProperty("com.sun.xml.bind.namespacePrefixMapper",
				new NamespacePrefixMapperImpl(CFDv3.PREFIXES));
		m.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
		m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,
				"http://www.sat.gob.mx/TimbreFiscalDigital TimbreFiscalDigital.xsd");
		m.marshal(tfd, doc);
		return doc.getDocumentElement();
	}

	private TimbreFiscalDigital createStamp(UUID uuid, Date date) {
		ObjectFactory of        = new ObjectFactory();
		TimbreFiscalDigital tfd = of.createTimbreFiscalDigital();
		
		tfd.setVersion("1.1");
		tfd.setFechaTimbrado(date);
		
		if(document_3 != null){
			tfd.setSelloCFD(document_3.getSello());
		}
		
		tfd.setUUID(uuid.toString());
		
		BigInteger bi = cert.getSerialNumber();
		
		tfd.setNoCertificadoSAT(new String(bi.toByteArray()));

		return tfd;
	}

	/**V 3.3**/
	public static TimbreFiscalDigital getTimbreFiscalDigital(Comprobante document) throws Exception {
		Comprobante.Complemento comp = document.getComplemento() == null || document.getComplemento().size() <= 0 ? null : document.getComplemento().get(0);
		
		if (comp != null) {
			List<Object> list = comp.getAny();
			
			for (Object o : list) {
				if (o instanceof TimbreFiscalDigital) {
					return (TimbreFiscalDigital) o;
				}
			}
		}
		
		return null;
	}
	
	private TimbreFiscalDigital getTimbreFiscalDigital(Comprobante document, UUID uuid, Date date) throws Exception {
		Comprobante.Complemento comp = document.getComplemento().get(0);
		
		if (comp != null) {
			List<Object> list = comp.getAny();
			for (Object o : list) {
				if (o instanceof TimbreFiscalDigital) {
					return (TimbreFiscalDigital) o;
				}
			}
		}
		return createStamp(uuid, date);
	}
}
