package com.infra.factura.business.validation;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.input.JDOMParseException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.SAXException;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

import com.infra.cliente.addenda.dto.FeAddendaDto;
import com.infra.core.model.UsuarioWS;
import com.infra.factura.bigdata.sat.cfdi.CFDv3_2;
import com.infra.factura.bigdata.sat.common.NamespacePrefixMapperImpl;
import com.infra.factura.business.common.GeneradorPdfCFDv3_2;
import com.infra.factura.business.common.GenericCFD;
import com.infra.factura.business.schema.util.StringAndInputstreamUtil;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDEstatus;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDOrigen;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDTipo;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDTipo_Cliente;
import com.infra.factura.business.validation.util.FeConstantesValidacion.CFDVersion;
import com.infra.factura.dto.FeErrorValidacionDto;
import com.infra.factura.dto.FeFacturaDto;
import com.infra.factura.dto.FeResultadoValidaCFDDto;
import com.infra.factura.exception.UnexpectedRuntimeException;
import com.infra.factura.exception.base.SRFEBaseException;
import com.infra.factura.util.ConstantesGenerales;
import com.infra.factura.util.FechaUtil;

public class FeValidadorExtranjeroBusiness extends FeValidadorExtranjeroBaseBusiness {

	public FeResultadoValidaCFDDto validaFactura(CFDOrigen origen, InputStream xmlInputStream, String rfcProveedor,
			UsuarioWS usuario, boolean flujoAgenciaViajes, Locale locale, Integer idEscenario) {
		this.origen = origen;
		String xmlString = null;
		this.idProveedor = rfcProveedor != null ? Integer.parseInt(rfcProveedor) : 0;
		this.numProveedorSAP = rfcProveedor;
		this.locale = locale;

		try {
			xmlString = StringAndInputstreamUtil.convertStreamToStringUnicodeEscape(xmlInputStream);

			if (xmlString != null) {
				xmlString = xmlString.trim();
				xmlString = xmlString.replaceAll("\r\n", " ");
				xmlString = xmlString.replaceAll("\n", " ");
				xmlString = xmlString.replaceAll("\r", " ");
				xmlString = xmlString.replaceAll("\t", " ");
			}

			validaFactura(xmlInputStream, xmlString, rfcProveedor, usuario, flujoAgenciaViajes, idEscenario);
		} catch (IOException e) {
			e.printStackTrace();
			final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
			unexpectedRuntimeException.logException();
			registraError("validacion-002", unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
					+ (e.getMessage() != null ? e.getMessage() : ""));
			feResultadoValidaExtranjeroDto.setValido(false);
			feResultadoValidaExtranjeroDto.setAceptada(false);
			feResultadoValidaExtranjeroDto.setErrores(errors);
		}

		return feResultadoValidaExtranjeroDto;
	}

	private FeResultadoValidaCFDDto validaFactura(InputStream xmlInputStream, String xmlString, String proveedor,
			UsuarioWS usuario, boolean flujoAgenciaViajes, Integer idEscenario) {
		Calendar fechaEmision = null;
		Calendar fechaPermitida = null;

		logger.info("Validar factura Extranjero");
		try {
			if (!(xmlInputStream instanceof FileInputStream)) {
				xmlInputStream.reset();
			}
		} catch (IOException e) {
			logger.error("Error al reprocesar el InputStream del XML", e);
		}
		Locale.setDefault(new Locale("es", "ES"));
		boolean isValidCfdUTF8Encoding = false;
		GenericCFD cfd = null;
		SAXBuilder builder = new SAXBuilder();
		String uriNamespace = null;

		if (null != xmlString) {
			Document d = null;
			try {
				d = builder.build(xmlInputStream);
				uriNamespace = d.getRootElement().getNamespace().getURI();
				isValidCfdUTF8Encoding = true;
			} catch (JDOMParseException e) {
				if (e.getMessage().contains(ERROR_INVALID_ENCODING_NAME)) {
					registraError("validacion-003");
				} else {
					final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
					unexpectedRuntimeException.logException();
					registraError("validacion-004", unexpectedRuntimeException.getExceptionInfo().getExceptionID()
							+ ". " + (e.getMessage() != null ? e.getMessage() : ""));
				}
				guardaFactura = false;
			} catch (Exception e) {
				final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
				unexpectedRuntimeException.logException();
				registraError("validacion-005", unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
						+ (e.getMessage() != null ? e.getMessage() : ""));
				guardaFactura = false;
			}

			if (isValidCfdUTF8Encoding) {
				final Attribute versionComprobante = d.getRootElement().getAttribute("version");
				// final Attribute tipoDeComprobante =
				// d.getRootElement().getAttribute("tipoDeComprobante");
				if (versionComprobante != null) {
					if (uriNamespace != null && uriNamespace.equals(GenericCFD.CFD_2_NAMESPACE)) {
						version = CFDVersion.getVersionByNumber(versionComprobante.getValue());
					} else if (uriNamespace != null && uriNamespace.equals(GenericCFD.CFD_3_NAMESPACE)) {
						version = CFDVersion.getVersionByNumber(versionComprobante.getValue());
					}
				} else {
					version = CFDVersion.None;
				}
				try {
					switch (version) {
					case CFDv3_2:
						if (isCFDv2(xmlString)) {
							registraError("validacion-006", uriNamespace);
							guardaFactura = false;
						} else {
							comprobanteV3_2 = CFDv3_2.newComprobante(xmlString);
						}
						break;
					default:
						guardaFactura = false;
						registraError("validacion-055");
						break;
					}
				} catch (Exception e) {
					e.printStackTrace();
					final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
					unexpectedRuntimeException.logException();
					registraError("validacion-007", unexpectedRuntimeException.getExceptionInfo().getExceptionID()
							+ ". " + (e.getMessage() != null ? e.getMessage() : ""));
					guardaFactura = false;
				}

				if (null != comprobanteV3_2) {
					try {
						switch (version) {

						case CFDv3_2:
							cfd = new CFDv3_2(comprobanteV3_2);
							break;
						default:
							break;
						}
					} catch (Exception e) {
						final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(e);
						unexpectedRuntimeException.logException();
						registraError("validacion-008", version.name(),
								unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
										+ (e.getMessage() != null ? e.getMessage() : ""));
					}

					if (null != cfd) {
						cfd.setXmlDocument(xmlString);
						// if(esCFDParaClienteProspectiva(version)){
						if (proveedor != null || true) {// if (proveedor != null
														// ||
														// esCFDProveedorRegistrado(version,
														// usuario)) {
							if (!esComprobanteAceptado(version)) {
								// if(contieneCertificadoEmisor(xmlString)){

								SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy");
								SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

								fechaEmision = Calendar.getInstance();
								fechaEmision.setTime(getFecha(version));
								String mesesAtras = ConstantesGenerales.MESES_ATRAS_PERMITIDOS+"";
								int meses = mesesAtras == null || mesesAtras.trim().isEmpty() ? -3
										: (Integer.parseInt(mesesAtras)) * (-1);

								fechaPermitida = Calendar.getInstance();
								fechaPermitida.setTime(new Date());
								fechaPermitida.add(Calendar.MONTH, meses);
								fechaPermitida.set(Calendar.DATE, 1);
								fechaPermitida.set(Calendar.HOUR_OF_DAY, 0);
								fechaPermitida.set(Calendar.MINUTE, 0);
								fechaPermitida.set(Calendar.SECOND, 0);

								logger.debug(" ===== > Fecha límite de emisión: "
										+ dateFormat2.format(fechaPermitida.getTime()));
								logger.debug(" ===== > Fecha de emisión de la factura: "
										+ dateFormat2.format(fechaEmision.getTime()));

								if (Integer.parseInt(dateFormat.format(new Date())) != getAnoFactura(version)) {
									registraError("validacion-073");
								} else if (fechaEmision.compareTo(fechaPermitida) < 0) {
									registraError("validacion-074", String.valueOf(meses * (-1)));
								} else {
									try {
										Calendar newCalendar = Calendar.getInstance();
										newCalendar.setTime((getFecha(version)));

										Calendar newCalendarHoy = Calendar.getInstance();
										newCalendarHoy.setTime(new Date());

										if (FechaUtil.esMenor(newCalendar, newCalendarHoy)) {
											verificarAddenda(cfd, xmlString);
										} else {
											registraError("validacion-075");
										}

									} catch (Exception e) {
										final UnexpectedRuntimeException unexpectedRuntimeException = new UnexpectedRuntimeException(
												e);
										unexpectedRuntimeException.logException();
										registraError("validacion-008", version.name(),
												unexpectedRuntimeException.getExceptionInfo().getExceptionID() + ". "
														+ (e.getMessage() != null ? e.getMessage() : ""));
									}

									if ((origen.equals(CFDOrigen.WEB_PORTAL) && addendaErrorCount != 0)) {
										errorCount = 0;
										errors.clear();
										// }else{
										// System.out.println("Validar
										// comprobante");
										// validarComprobante(xmlInputStream,
										// cfd);
										// if (version == CFDVersion.CFDv3 &&
										// errorCount == 0) {
										// verificarTimbrado(cfd,
										// comprobanteV3);
										// }else if (version ==
										// CFDVersion.CFDv3_2 && errorCount ==
										// 0) {
										// verificarTimbrado(cfd,
										// comprobanteV3_2);
										// }
									}
								}
								// }
							} else {
								guardaFactura = false;
							}
						}
						// }
					}
				}
			}
		}

		procesaResultadoValidacion(version, cfd, proveedor, usuario, flujoAgenciaViajes, idEscenario);

		return feResultadoValidaExtranjeroDto;
	}

	protected void verificarAddenda(GenericCFD cfd, String xmlString) {
		FeAddendaDto addendaClienteDto = new FeAddendaDto(version, cfd, xmlString);
		switch (addendaClienteDto.getTipoCliente()) {
		case SOC:
			if ((addendaClienteDto.getPartidas() == null || addendaClienteDto.getPartidas().isEmpty())
					&& (addendaClienteDto.getClaveImpuesto() == null
							|| addendaClienteDto.getClaveImpuesto().trim().isEmpty())) {
				registraErrorAddenda("validacion-077");
				addendaClienteDto.setValidCliente(false);
			}

			if (addendaClienteDto.getTextoCabecera() == null || addendaClienteDto.getTextoCabecera().trim().isEmpty()) {
				registraErrorAddenda("validacion-076");
				addendaClienteDto.setValidCliente(false);
			}
			break;
		case COC:
			if ((addendaClienteDto.getNumeroReferencia() == null
					|| addendaClienteDto.getNumeroReferencia().trim().isEmpty())
					&& (addendaClienteDto.getNumeroFactura() == null
							|| addendaClienteDto.getNumeroFactura().trim().isEmpty())
					&& (addendaClienteDto.getDocumentosMaterial() == null
							|| addendaClienteDto.getDocumentosMaterial().isEmpty())
					&& (addendaClienteDto.getTextoCabecera() == null
							|| addendaClienteDto.getTextoCabecera().trim().isEmpty())
					&& (addendaClienteDto.getNumeroPedido() == null
							|| addendaClienteDto.getNumeroPedido().trim().isEmpty())) {
				registraErrorAddenda("validacion-029");
				addendaClienteDto.setValidCliente(false);
			}

			if ((addendaClienteDto.getTextoCabecera() == null || addendaClienteDto.getTextoCabecera().trim().isEmpty())
					&& addendaClienteDto.getNumeroPedido() != null
					&& !addendaClienteDto.getNumeroPedido().trim().isEmpty()) {
				registraErrorAddenda("validacion-076");
				addendaClienteDto.setValidCliente(false);
			} else if (addendaClienteDto.getTextoCabecera() != null
					&& !addendaClienteDto.getTextoCabecera().trim().isEmpty()
					&& (addendaClienteDto.getNumeroPedido() == null
							|| addendaClienteDto.getNumeroPedido().trim().isEmpty())) {
				registraErrorAddenda("validacion-029");
				addendaClienteDto.setValidCliente(false);
			}
			break;
		default:
			if (addendaClienteDto.isEmpty()) {
				contieneAddenda = false;
				registraErrorAddenda("validacion-044");
			} else {
				if (!addendaClienteDto.isAddendaCliente()) {
					registraErrorAddenda("validacion-046");
				} else {
					if (addendaClienteDto.isInsufficientInformation()) {
						registraErrorAddenda("validacion-047");
					} else {
						addendaClienteDto.setValidCliente(false);
						registraErrorAddenda("validacion-046");// Tiene la misma
																// estructura,
																// pero
																// diferentes
																// campos
					}
				}
			}
			break;
		}

		if (!addendaClienteDto.isEmpty() && addendaClienteDto.isAddendaCliente()
				&& addendaClienteDto.isValidCliente()) {
			String addendaXML = null;
			switch (version) {
			case CFDv2_2:
			case CFDv2:
				if (null != xmlString) {
					final Pattern pattern = Pattern.compile("<requestForPayment" + "(.+?)" + "</requestForPayment>");
					final Matcher matcher = pattern.matcher(xmlString);
					if (matcher.find()) {
						addendaXML = xmlString.substring(matcher.start(), matcher.end());
						addendaXML = GenericCFD.XML_HEADER + addendaXML;
					}
				}
				break;
			case CFDv3_2:
			case CFDv3:
				if (null != xmlString) {
					final Pattern pattern = Pattern
							.compile("<cfdi:requestForPayment" + "(.+?)" + "</cfdi:requestForPayment>");
					final Matcher matcher = pattern.matcher(xmlString);
					if (matcher.find()) {
						addendaXML = xmlString.substring(matcher.start(), matcher.end());
						addendaXML = GenericCFD.XML_HEADER + addendaXML;
						addendaXML = addendaXML.replace("cfdi:", "");
					}
				}
				break;
			default:
				break;
			}
			if (addendaXML != null) {
				validarXmlAddenda(addendaClienteDto, addendaXML);
			}
		}

		feAddendaDto = addendaClienteDto;
	}

	public void validarXmlAddenda(FeAddendaDto addendaPndGDto, String addendaXML) {
		SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.XML_NS_URI);
		Schema schema = null;
		try {
			schema = sf.newSchema(getClass().getResource("/xsd/addenda/addenda.xsd"));
			Validator validator = schema.newValidator();
			AddendaErrorHandler handler = new AddendaErrorHandler();
			if (handler != null) {
				validator.setErrorHandler(handler);
			}
			validator.validate(new StreamSource(StringAndInputstreamUtil.convertStringToStream(addendaXML)));
		} catch (SAXException e) {
			logger.error("Ocurrió un error al validar la Addenda", e);
		} catch (IOException e) {
			logger.error("Ocurrió un error al validar la Addenda", e);
		}

		if (addendaErrorCount > 0) {
			addendaPndGDto.setValidCliente(false);
		}
	}

	protected void procesaResultadoValidacion(CFDVersion version, GenericCFD cfd, String proveedor, UsuarioWS usuario,
			boolean flujoAgenciaViajes, Integer idEscena) {
		FeFacturaDto facturaDto = null;
		JAXBContext jaxbContext;
		String CFD_NAMESPACE;
		ImmutableMap<String, String> PREFIXES;
		com.infra.cliente.addenda.v2.Addenda addendaV2;
		StringWriter sw = new StringWriter();
		Map<String, String> localPrefixes;
		Marshaller marshaller;
		int idEscenario = 0;

		feResultadoValidaExtranjeroDto.setProveedorTMS(proveedorTMS);
		if (errorCount == 0 && addendaErrorCount == 0) {
			facturaDto = new FeFacturaDto(version, cfd, CFDEstatus.Aceptado);
			facturaDto.setIdFactura(idFactura);
			facturaDto.setIdProveedor(idProveedor);
			facturaDto.setOrigen(origen);
			facturaDto.setVersionCFD(CFDVersion.FE);
			facturaDto.setUuid(numProveedorSAP + "-" + facturaDto.getFolio());
			facturaDto.setAddendaPnG(feAddendaDto);

			if (flujoAgenciaViajes) {
				facturaDto.setTipoCFD(CFDTipo.RECIBO);
			}

			try {

				// XML ADDENDA
				CFD_NAMESPACE = "";
				PREFIXES = ImmutableMap.of("http://www.w3.org/2001/XMLSchema-instance", "xsi", CFD_NAMESPACE, "");
				jaxbContext = JAXBContext
						.newInstance(com.infra.cliente.addenda.v2.ObjectFactory.class.getPackage().getName());
				addendaV2 = (com.infra.cliente.addenda.v2.Addenda) feAddendaDto.getAddendaCliente();
				localPrefixes = Maps.newHashMap(PREFIXES);
				marshaller = jaxbContext.createMarshaller();
				marshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper",
						new NamespacePrefixMapperImpl(localPrefixes));
				marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
				marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
				marshaller.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
				marshaller.marshal(addendaV2, sw);
				facturaDto.setXmlAddenda(sw.toString());
				// TERMINA XML ADDENDA

				// DETERMINAR ESCENARIO PARA EXTRAJEROS
				if (feAddendaDto.getTipoCliente().equals(CFDTipo_Cliente.COC)) {
					if (feAddendaDto.getNumeroPedido() != null && !feAddendaDto.getNumeroPedido().trim().isEmpty()
							&& feAddendaDto.getTextoCabecera() != null
							&& !feAddendaDto.getTextoCabecera().trim().isEmpty()) {
						idEscenario = 3;
					} else if (feAddendaDto.getDocumentosMaterial() != null
							&& !feAddendaDto.getDocumentosMaterial().isEmpty()) {
						idEscenario = 2;
					} else if (null != idEscena && idEscena.intValue() == 7) {
						idEscenario = idEscena;
					} else {
						idEscenario = 1;
					}
				} else if (feAddendaDto.getTipoCliente().equals(CFDTipo_Cliente.SOC)) {
					if (feAddendaDto.getTextoCabecera() != null && !feAddendaDto.getTextoCabecera().trim().isEmpty()
							&& (feAddendaDto.getPartidas() == null || feAddendaDto.getPartidas().size() == 0)) {
						idEscenario = 6;
					} else if (facturaDto.getTipoCFD().equals(CFDTipo.EGRESO)
							|| facturaDto.getTipoCFD().equals(CFDTipo.E)) {
						idEscenario = 5;
					} else if (facturaDto.getTipoCFD().equals(CFDTipo.INGRESO)
							|| facturaDto.getTipoCFD().equals(CFDTipo.I)) {
						idEscenario = 4;
					}
				}

				facturaDto.setIdEscenario(idEscenario);
				// TERMINA DETERMINAR ESCENARIO

				if (idFactura == 0) {
				} else {
				}

				logger.debug("ID Factura " + facturaDto.getIdFactura());

				// facturaDto.setIdFactura(facturaMapper.guardarFactura(facturaDto));

				idFactura = facturaDto.getIdFactura();
				feResultadoValidaExtranjeroDto.setValido(true);
				feResultadoValidaExtranjeroDto.setAceptada(true);
				// registrarPDFGenerico(facturaDto);
			} catch (Exception e) {
				logger.error("Ocurrió un error al guardar el comprobante.", e);
				final SRFEBaseException e1 = handleException(e);
				registraError("validacion-053",
						e1.getExceptionInfo().getExceptionID() + ". " + (e.getMessage() != null ? e.getMessage() : ""));
				feResultadoValidaExtranjeroDto.setValido(true);
				feResultadoValidaExtranjeroDto.setAceptada(false);
			}

		} else if (errorCount == 0 && addendaErrorCount != 0) {
			facturaDto = new FeFacturaDto(version, cfd, CFDEstatus.RegistroIncompleto);// Se
																						// modifico
																						// el
																						// estatus
																						// de
																						// Sin
																						// Addenda
																						// por
																						// Registro
																						// Incompleto
			facturaDto.setIdFactura(idFactura);
			facturaDto.setIdProveedor(idProveedor);
			facturaDto.setOrigen(origen);
			facturaDto.setVersionCFD(CFDVersion.FE);
			facturaDto.setUuid(numProveedorSAP + "-" + facturaDto.getFolio());
			facturaDto.setAddendaPnG(feAddendaDto);

			if (flujoAgenciaViajes) {
				facturaDto.setTipoCFD(CFDTipo.RECIBO);
			}

			try {
				guardarFacturaRechazo(facturaDto, addendaErrors);
				idFactura = facturaDto.getIdFactura();

				feResultadoValidaExtranjeroDto.setValido(true);
				feResultadoValidaExtranjeroDto.setAceptada(false);
				feResultadoValidaExtranjeroDto.setEditarAddenda(true);

				if (feAddendaDto != null && feAddendaDto.isEmpty()) {
					feResultadoValidaExtranjeroDto.setAddendaVacia(true);
				} else if (feAddendaDto != null && !feAddendaDto.isAddendaCliente()) {
					feResultadoValidaExtranjeroDto.setAddendaPnG(false);
				} else if (feAddendaDto != null
						&& (feAddendaDto.isInsufficientInformation() || !feAddendaDto.isValidCliente())) {
					feResultadoValidaExtranjeroDto.setAddendaValida(false);
				}

			} catch (Exception e) {
				logger.error("Ocurrió un error al guardar el comprobante.", e);
				final SRFEBaseException e1 = handleException(e);
				registraError("validacion-054",
						e1.getExceptionInfo().getExceptionID() + ". " + (e.getMessage() != null ? e.getMessage() : ""));
			}
		} else {
			errors.addAll(addendaErrors);
			feResultadoValidaExtranjeroDto.setErrores(errors);
			if (guardaFactura) {
				facturaDto = new FeFacturaDto(version, cfd, CFDEstatus.RechazoFiscal);
				facturaDto.setIdFactura(idFactura);
				facturaDto.setIdProveedor(idProveedor);
				facturaDto.setOrigen(origen);
				facturaDto.setVersionCFD(CFDVersion.FE);
				facturaDto.setUuid(numProveedorSAP + "-" + facturaDto.getFolio());
				facturaDto.setAddendaPnG(feAddendaDto);

				if (flujoAgenciaViajes) {
					facturaDto.setTipoCFD(CFDTipo.RECIBO);
				}

				try {
					guardarFacturaRechazo(facturaDto, errors);
					idFactura = facturaDto.getIdFactura();
				} catch (Exception e) {
					logger.error("Ocurrió un error al guardar el comprobante.", e);
					final SRFEBaseException e1 = handleException(e);
					registraError("validacion-054", e1.getExceptionInfo().getExceptionID() + ". "
							+ (e.getMessage() != null ? e.getMessage() : ""));
				}
			}

		}

		errors.addAll(addendaErrors);
		feResultadoValidaExtranjeroDto.setErrores(errors);
		feResultadoValidaExtranjeroDto.setFactura(facturaDto);
		feResultadoValidaExtranjeroDto.setNoProveedorSAP(numProveedorSAP);
	}

	private void guardarFacturaRechazo(FeFacturaDto f, List<FeErrorValidacionDto> errores) throws Exception {

		if (errores != null) {
			for (FeErrorValidacionDto e : errores) {
			}
		}

	}

	public void registrarPDFGenerico(FeFacturaDto factura) {
		GeneradorPdfCFDv3_2 generadorPdfCFDv3 = new GeneradorPdfCFDv3_2();
		try {
			final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
			generadorPdfCFDv3.generaPDF(outputStream, comprobanteV3_2, factura.getFechaRecepcion());
			factura.setPdfFirmado(outputStream.toByteArray());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}